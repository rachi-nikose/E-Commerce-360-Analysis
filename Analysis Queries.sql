-- Sales Analysis:

-- Total Revenue Generated
SELECT 
    SUM(sale_price * quantity) AS Revenue 
FROM 
    orderdetails od
JOIN 
    products pro ON pro.productid = od.productid;

-- Total Quantity:
SELECT 
    SUM(quantity) AS Total_Quantity 
FROM 
    orderdetails od
JOIN 
    products pro ON pro.productid = od.productid;

-- Total Orders:
SELECT
	COUNT(*) AS Total_Orders
FROM
	orders;
    
-- Average Order Amount:
SELECT 
    AVG(total_order_amount) AS Avg_order_amount
FROM 
    orders;

-- Total revenue generated by each product category and sub-category.

-- Category:
SELECT 
    categoryname AS Category, 
    SUM(quantity) AS Total_Quantity, 
    SUM(quantity * sale_price) AS Revenue 
FROM 
    products pro 
JOIN 
    orderdetails od ON pro.productid = od.productid 
JOIN 
    category cat ON cat.categoryid = pro.category_id
GROUP BY 
    1
ORDER BY 
    2 DESC,3 DESC;

-- Sub-Category:

-- Top:
SELECT 
    sub_category, 
    SUM(quantity) AS Total_Quantity, 
    SUM(quantity * sale_price) AS Revenue 
FROM 
    products pro 
JOIN 
    orderdetails od ON pro.productid = od.productid 
JOIN 
    orders ord ON od.orderid = ord.orderid
GROUP BY 
    1
ORDER BY 
    2 DESC,3 DESC 
LIMIT 10;

-- Least:
SELECT 
    pro.sub_category, 
    SUM(quantity) AS Total_Quantity, 
    SUM(quantity * sale_price) AS Revenue 
FROM 
    products pro 
JOIN 
    orderdetails od ON pro.productid = od.productid 
JOIN 
    orders ord ON od.orderid = ord.orderid
GROUP BY 
    1
ORDER BY 
    2,3 
LIMIT 10;

-- Top-selling products (based on quantity sold and revenue generated):
SELECT 
    pro.product, 
    SUM(quantity) AS Total_Quantity, 
    SUM(quantity * sale_price) AS Revenue 
FROM 
    products pro 
JOIN 
    orderdetails od ON pro.productid = od.productid 
JOIN 
    orders ord ON od.orderid = ord.orderid
GROUP BY 
    1
ORDER BY 
    2 DESC,3 DESC 
LIMIT 10;

-- Number of orders by year:
SELECT
    MONTH(orderdate) AS Month, 
    COUNT(CASE WHEN YEAR(orderdate) = 2020 THEN orderid END) AS '2020',
    COUNT(CASE WHEN YEAR(orderdate) = 2021 THEN orderid END) AS '2021'
FROM 
    orders ord 
GROUP BY 
    1
ORDER BY 
	1;

-- Average order value over time (AOV):
SELECT 
    MONTHNAME(orderdate) AS Month, 
    AVG(CASE WHEN YEAR(orderdate) = 2020 THEN total_order_amount END) AS '2020',
    AVG(CASE WHEN YEAR(orderdate) = 2021 THEN total_order_amount END) AS '2021'
FROM 
    orders ord 
GROUP BY 
    1
ORDER BY 
    CASE 
        WHEN Month = 'January' THEN 1
        WHEN Month = 'February' THEN 2
        WHEN Month = 'March' THEN 3
        WHEN Month = 'April' THEN 4
        WHEN Month = 'May' THEN 5
        WHEN Month = 'June' THEN 6
        WHEN Month = 'July' THEN 7
        WHEN Month = 'August' THEN 8
        WHEN Month = 'September' THEN 9
        WHEN Month = 'October' THEN 10
        WHEN Month = 'November' THEN 11
        WHEN Month = 'December' THEN 12
    END;

-- Revenue by countries:
-- Countries with high revenue
SELECT 
    cs.country, 
    SUM(quantity * sale_price) AS Revenue
FROM 
    customers cs 
JOIN 
    orders ord ON ord.customerid = cs.customerid 
JOIN 
    orderdetails od ON ord.orderid = od.orderid
JOIN 
    products pro ON pro.productid = od.productid
GROUP BY 
    1 
ORDER BY 
    2 DESC 
LIMIT 10;

-- Countries with low Revenue:
SELECT 
    country, 
    SUM(quantity * sale_price) AS Revenue
FROM 
    customers cs 
JOIN 
    orders ord ON ord.customerid = cs.customerid 
JOIN 
    orderdetails od ON ord.orderid = od.orderid
JOIN 
    products pro ON pro.productid = od.productid
GROUP BY 
    1 
ORDER BY 
    2  
LIMIT 3;

-- CUSTOMER ANALYSIS:

-- Total Customers:
select count(*) as Total_Customers from customers;

-- Total inactive customers:
SELECT COUNT(customerid) as Inactive_Customers 
FROM (
    SELECT customerid, MAX(orderdate) as Last_order 
    FROM orders 
    GROUP BY customerid
    HAVING MAX(orderdate) < DATE_SUB((SELECT MAX(orderdate) FROM orders), INTERVAL 6 MONTH)
) as subquery;

-- Total Active Customers:
SELECT COUNT(customerid) as Active_Customers 
FROM (
    SELECT customerid, MAX(orderdate) as Last_order 
    FROM orders 
    GROUP BY customerid
    HAVING MAX(orderdate) >= DATE_SUB((SELECT MAX(orderdate) FROM orders), INTERVAL 6 MONTH)
) as subquery;

-- Total number of customers by country.
-- Countries with high customer base:
SELECT 
    country, 
    COUNT(*) AS Number_of_Customers 
FROM 
    customers cs 
GROUP BY 
    1
ORDER BY 
    2 DESC 
LIMIT 10;

-- Countries with low customer base:
SELECT 
    country, 
    COUNT(*) AS Number_of_Customers 
FROM 
    customers cs 
GROUP BY 
    1 
ORDER BY 
    2 
LIMIT 5;

-- Customer segmentation:
SELECT 
    CASE 
        WHEN YEAR(date_of_birth) < 1980 THEN 'Old'
        WHEN YEAR(date_of_birth) BETWEEN 1980 AND 1995 THEN 'Middle Aged'
        ELSE 'Young'
    END AS Class,
    COUNT(*) AS Total_Customers 
FROM 
    customers cs 
GROUP BY 
    1 
ORDER BY 
    2 DESC;

-- New customers:
SELECT 
    MONTHNAME(dateentered) AS Month, 
    COUNT(CASE WHEN YEAR(dateentered) = 2020 THEN cs.customerid END) AS '2020_',
    COUNT(CASE WHEN YEAR(dateentered) = 2021 THEN cs.customerid END) AS '2021_'
FROM 
    customers cs
GROUP BY 
    1
ORDER BY 
    CASE 
        WHEN Month = 'January' THEN 1
        WHEN Month = 'February' THEN 2
        WHEN Month = 'March' THEN 3
        WHEN Month = 'April' THEN 4
        WHEN Month = 'May' THEN 5
        WHEN Month = 'June' THEN 6
        WHEN Month = 'July' THEN 7
        WHEN Month = 'August' THEN 8
        WHEN Month = 'September' THEN 9
        WHEN Month = 'October' THEN 10
        WHEN Month = 'November' THEN 11
        WHEN Month = 'December' THEN 12
    END;


-- PAYMENT ANALYSIS:

-- Payment Method and Status:
SELECT 
    paymenttype,
    allowed
FROM 
    Payments;

-- Distribution of Payment Types:
SELECT 
	PaymentType,
    COUNT(*) AS Number_Of_Payments
FROM 
    orders ord
JOIN 
    payments pay ON pay.paymentid = ord.paymentid
GROUP BY
	1
ORDER BY
	2 DESC;

-- Amount Received By Payment Types:
SELECT 
    paymenttype,
    SUM(total_order_amount) AS Revenue
FROM 
    orders ord
JOIN 
    payments pay ON pay.paymentid = ord.paymentid
GROUP BY 
    1
ORDER BY 
    2 DESC;

-- Average Amount By Payment Types:
SELECT 
    paymenttype,
    AVG(total_order_amount) AS Average_Revenue
FROM 
    orders ord
JOIN 
    payments pay ON pay.paymentid = ord.paymentid
GROUP BY 
    1
ORDER BY 
    2 DESC;

-- Payment Comparison By Year:
SELECT 
    paymenttype, 
    COUNT(CASE WHEN YEAR(orderdate) = 2020 THEN pay.paymentid END) AS '2020_Payments',
    COUNT(CASE WHEN YEAR(orderdate) = 2021 THEN pay.paymentid END) AS '2021_Payments'
FROM 
    orders ord
JOIN 
    payments pay ON pay.paymentid = ord.paymentid
GROUP BY 
    1
ORDER BY 
    2 DESC,
    3 DESC;


-- SUPPLIER ANALYSIS:

SELECT * FROM suppliers;

-- Quantity Supplierd by Suppliers:
SELECT
	companyname AS Supplier, 
	SUM(quantity) AS Total_Supplied
FROM
	orderdetails od 
JOIN
	suppliers sp ON sp.SupplierID=od.SupplierID
GROUP BY
	1
ORDER BY
	2 DESC;

-- Suppliers By Country:
SELECT
	country,
    count(*) AS Total_Suppliers
FROM
	suppliers
GROUP BY
	1
ORDER BY
	2 DESC;
    
-- Number of distinct Products Supplied:
SELECT
	companyname,
    count(distinct pro.productid) as Number_of_Products
FROM
	suppliers sp
JOIN
	orderdetails od ON sp.SupplierID=od.SupplierID
JOIN 
	products pro ON pro.productid=od.productid
GROUP BY
	1;

-- Supplier Performance:
SELECT
    sp.supplierid,
    companyname,
    COUNT(od.orderid) AS total_orders,
    SUM(sale_price*quantity) AS total_revenue
FROM
    suppliers sp
JOIN
    orderdetails od ON sp.supplierid = od.supplierid
JOIN
    products pro ON pro.productID = od.productid
GROUP BY
	1,2
ORDER BY
    4 DESC;
    
-- Number of low perferforming products supplied By Suppliers:
SELECT
	companyname AS Suppliers,
    COUNT(DISTINCT productid) As Total_Low_Performing_Products
FROM
	orderdetails od
JOIN
	suppliers sp ON sp.supplierID=od.supplierid
WHERE
	productid IN ( -- sub query to get low performing products
					SELECT
						ProductID
					FROM (SELECT -- sub query to get products which has less then avg total quantity ordered
							productid,
							SUM(quantity) as Total_Quantity
						FROM
							orderdetails od
						GROUP BY
							1
						HAVING 
							Total_Quantity<( -- sub query to get avg Total quantity
											SELECT
												AVG(Total_Quantity) AS Avg_Quantity
											FROM
												(SELECT -- sub query to get Total quantity sold by each product
													productid,
													SUM(quantity) as Total_Quantity
												FROM
													orderdetails od
												GROUP BY
													1) AS temp1
											)
								)as temp2
					)
GROUP BY
	1
ORDER BY
	2;
    
-- Total Distinct Products Available:
SELECT
	COUNT(DISTINCT productid) AS Total_Distinct_Products
FROM products;

-- Total Low Performaing Products:
SELECT
	COUNT(DISTINCT ProductID) AS Total_Low_Performing_Products
FROM (SELECT -- sub query to get products which has less then avg total quantity ordered
		productid,
		SUM(quantity) as Total_Quantity
	FROM
		orderdetails od
	GROUP BY
		1
	HAVING 
		Total_Quantity<( -- sub query to get avg Total quantity
						SELECT
							AVG(Total_Quantity) AS Avg_Quantity
						FROM
							(SELECT -- sub query to get Total quantity sold by each product
								productid,
								SUM(quantity) as Total_Quantity
							FROM
								orderdetails od
							GROUP BY
								1) AS temp1
						)
		)as temp2;


-- SHIPPING ANALYSIS:

SELECT * FROM shippers;

-- Total Shippers:
SELECT
	COUNT(*) AS Total_Shippers
FROM Shippers;

-- Inactive Shippers:
SELECT
	DISTINCT companyname
FROM
	shippers shp
LEFT JOIN 
	orders ord ON shp.shipperid=ord.shipperid
WHERE
	orderid IS NULL;

-- Average Delivery Days:
SELECT
    AVG(DATEDIFF(deliverydate,shipdate)) AS Avg_Delivery_Time
FROM
	orders;

-- Total Orders Shipped By Shippers:
SELECT
	companyname,
    count(*) AS Total_Orders
FROM
	shippers shp
JOIN
	orders ord ON shp.shipperid=ord.shipperid
GROUP BY 
	1
ORDER BY
	2 DESC;

-- Average Delivery Days By Shippers:
SELECT
	companyname,
    AVG(DATEDIFF(deliverydate,shipdate)) AS Avg_Delivery_Time
FROM
	shippers shp
JOIN 
	orders ord ON shp.shipperid=ord.shipperid
GROUP BY
	1
ORDER BY
	2;
